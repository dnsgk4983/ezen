1. 작업 폴더 등록
git init

2. 업로드할 파일 선택
git add 올릴파일이름(확장자까지 다 써주세요)
git add .

3. 업로드 대상 파일 등록(커밋하다)
git commit –m “최최최종 3/21” 

4. 사용자 계정등록 (누구 이름으로 내 저장소에 파일올리나)
git config --global user.email "홍길동@naver.com"
git config --global user.name "홍길동"

5. 중간 결과확인
내 로컬 작업 기준으로 파일등록 상태확인
git status 
나의 업로드(커밋) 히스토리 확인
git log
git log --all --oneline
git log --all --oneline --graph

6. 과거 파일과 변경 내역을 비교
git log --all --oneline 하고나면 7자리 id가 보이는데
비교하고싶은 버전의 7자리id를 저장 후 아래처럼 입력한다
git difftool 7자리id 7자리id
예) git difftool d602703 874e565

7. 내 온라인 저장소에 메인 폴더 등록
(저장소 만들고 최초 1회만)
git branch -M main

8. 등록된 파일을 깃헙 계정으로 업로드 하기 (push)
git push 내 깃헙주소 main

9. Git branch 브랜치 명 - 복사본이 만들어진다.
만들어진 복사본으로 이동하려면
git switch 브랜치명
내가 어디에 있는지 중간에 확인하고 싶으면 git status 입력하면 어느 브랜치에 있는지 정보가 나온다.

10. 복사본과 메일을 합치는 방법은 merge와 rebase 크게 두가지가 자주 쓰이는 편이다.
merge는 메인 폴더를 중심으로 branch를 합치는 방법이고(3-way)
git switch main 으로 메인 브랜치로 이동 후
git merge 복사 브랜치 이름  이렇게 합친다.
rebase는 브랜치 폴더를 중심으로 main을 합치는 방법이다.
git switch 복사브랜치
git rebase main 이렇게 하면 복사본을 중심으로 파일 합쳐짐

11. 복사 브랜치와 메인을 합치는 과정에서 당연히 코드 충돌이 생길 수 있다. 같은 영역에 두 코드가 존재하는 등 conflic 상황이 발생한다.
이 경우, conflict 나는 영역에서 내가 최종으로 가져갈 코드를 저장 후 결정된 코드를 담아서
git add .
git commit -m "병합완료"
이런 식으로 코드병합 후 새롭게 커밋하여 push하면 된다.

12. 업로드 할 때
git push 내 깃헙주소 복사본 이름
위 처럼 하면 깃헙 계정에 복사폴더(브랜치)가 생성되며 업로드되는데 나의 의도가 main에 업로드 하는건지
branch 에 업로드 하는 건지 신중히 확인하여 업로드하자
사용 완료한 (합치고 난) 브랜치는
git branch -d 복사브랜치 이름
위 처럼 입력하여 복사본들을 중간에 삭제하여 청소해주자.
만들기만 하고 합치지 않은 복사브랜치 제거법은
git branch -D 복사브랜치 이름

13. 내 깃헙 주소를 변수에 담아 두번 입력 안하는 법
Git remote add origin 저장소주소
이렇게 입력하면 origin 이라는 변수에 내 깃헙 주소를 저장한 것이다.
Git push origin -u main 이렇게만 입력해도 작동이 된다.
-u의 뜻은 방금 친 주소를 기억해라
Git push 이렇게만 입력해도 작업이 되니 참고하자.

14. 컴퓨터 환경이 바뀌었을 때 내 깃헙에서 과거 모든 히스토리를 포함한 작업 파일을 가져오는 법은
git clone 내 계정주소

15. 우리팀 지정 멤버만 저장소를 열람하고 편집작업을 허락하려면 repository를 private으로 정해주고 collabrator에 팀원을 초대하여 등록된 사람만 작업할 수 있도록 하면 된다.

16. 내 깃헙 계정에 내 로컬 작업환경과 다른 파일이 올라가거나 누군가 업로드 해버리면 깃헙상
작업 히스토리와 내 로컬환경 작업히스토리가 매치하지 않게 된다. 이러면 push를 통한 업로드가 불가능해지는데,
pull 명령어로 변경된 히스토리를 내 컴퓨터에 내려받아 히스토리를 일치 시킨 후 pull 작업이 가능하다.
git pull 내 계정주소
이렇게 하면 작업 히스토리가 내려받아진다.

17. git pull로 작업내역을 내려 받아도 git push가 작동하지 않는 경우가 생긴다. 크게 두가지 해결방법이 있다.
1) git clone으로 다른 폴더에 작업을 내려받아 거기서 부터 코딩후 push하는법
2) force push를 사용한 강제병합
git push -f 깃헙주소 main

1)번의 해결책은 저장소 히스토리부터 코딩을 다시해야 하는 점이고,
2)번 해결책의 단점은 과거 히스토리를 전부 무시하고 덮어 씌우는 방식 이므로
 저장소 이름이나 코딩 진행과정이 틀리면 완전히 잘못되는 경우가 생기므로 정말 신중히 해야한다

간혹 내가 작업 내역을 커밋하지않아 히스토리가 안맞을 수 있으므로
중간에 커밋도 한번하면서 히스토리 내역이 안맞는 상황을 피하자

18. git log 내부 hash 주소를 가지고 원하는 코드 버전으로 회귀 가능.
git reset 해시코드(7da281...)
위 처럼 해시값을 주면 된다.
바로 직전 버전으로 회귀
git reset HEAD